apiVersion: batch/v1
kind: Job
metadata:
  name: student-training-job
  namespace: csuf-titans
  labels:
    app: chord-student-training
spec:
  backoffLimit: 1              
  template:
    metadata:
      labels:
        app: chord-student-training
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
                - key: nvidia.com/gpu.product
                  operator: In
                  values:
                  - NVIDIA-GeForce-RTX-3090
      restartPolicy: Never
      initContainers:
        - name: download-code-and-data
          image: alpine:3.16
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -e
              echo "Starting init container for data preparation..."
              
              apk update && apk add --no-cache git curl unzip python3 py3-pip wget

              # Clone repository if it doesn't exist
              if [ ! -d /mnt/storage/ChordMini ]; then
                echo "Cloning repository..."
                git clone https://gitlab.com/ptnghia-j/ChordMini /mnt/storage/ChordMini
              fi
              
              # Create directories for FMA dataset and synthesized data
              mkdir -p /mnt/storage/ChordMini/data/fma_medium
              mkdir -p /mnt/storage/ChordMini/data/synth/spectrograms
              mkdir -p /mnt/storage/ChordMini/data/synth/labels
              
              # Download FMA Medium dataset if not already downloaded
              echo "Checking for FMA Medium dataset..."
              if [ ! -f /data/fma_medium.zip ] && [ ! -d /mnt/storage/ChordMini/data/fma_medium/000 ]; then
                echo "Downloading FMA Medium dataset..."
                cd /data
                wget -O fma_medium.zip https://os.unil.cloud.switch.ch/fma/fma_medium.zip || \
                  curl -L -o fma_medium.zip https://os.unil.cloud.switch.ch/fma/fma_medium.zip
                
                echo "Extracting dataset..."
                mkdir -p /data/fma_extract
                unzip -q /data/fma_medium.zip -d /data/fma_extract
                
                # Move extracted files to the expected location
                echo "Moving files to data directory..."
                if [ -d /data/fma_extract/fma_medium ]; then
                  mv /data/fma_extract/fma_medium/* /mnt/storage/ChordMini/data/fma_medium/
                else
                  # Try different folder structure
                  find /data/fma_extract -name "*.mp3" -exec cp {} /mnt/storage/ChordMini/data/fma_medium/ \;
                fi
                
                rm -rf /data/fma_extract
              fi
              
              # Create teacher model directory if needed
              mkdir -p /mnt/storage/ChordMini/modules/models/Teacher/BTC/test
              
              echo "Data preparation ready."
          resources:
            requests:
              cpu: 1
              memory: "2Gi"
            limits:
              cpu: 2
              memory: "4Gi"
          volumeMounts:
            - name: storage
              mountPath: /mnt/storage
            - name: storage
              mountPath: /data
      containers:
        - name: teacher-labeler
          image: pytorch/pytorch:1.9.0-cuda11.1-cudnn8-runtime
          workingDir: /mnt/storage/ChordMini
          imagePullPolicy: IfNotPresent
          env:
            - name: PYTHONPATH
              value: /mnt/storage/ChordMini
          command:
            - sh
            - -c
            - |
              set -e
              echo "Teacher model container started"
              
              # Install dependencies
              apt-get update && apt-get install -y libsndfile1 ffmpeg
              pip install --no-cache-dir -r requirements.txt
              pip install --no-cache-dir matplotlib tqdm pyyaml librosa
              
              # Download teacher model checkpoint if not present
              mkdir -p modules/models/Teacher/BTC/test
              if [ ! -f modules/models/Teacher/BTC/test/btc_model_large_voca.pt ]; then
                echo "Downloading teacher model checkpoint..."
                pip install gdown
                cd modules/models/Teacher/BTC/test
                gdown --id 1vPYY9nYkUMor14R-YHg-8Cm_YcMtvoS- -O btc_model_large_voca.pt
                cd /mnt/storage/ChordMini
              fi
              
              # Run teacher model to extract spectrograms and labels
              echo "Running teacher model to extract spectrograms and labels..."
              python -m modules.models.Teacher.BTC.spectrogram_labeler --audio_dir=./data/fma_medium --save_dir=./data/synth --voca=true
              
              echo "Teacher model processing complete."
          resources:
            requests:
              cpu: "2"
              memory: "8Gi"
              nvidia.com/gpu: "1"
            limits:
              cpu: "4"
              memory: "16Gi"
              nvidia.com/gpu: "1"
          volumeMounts:
            - name: storage
              mountPath: /mnt/storage
            - name: storage
              mountPath: /data
        
        - name: student-trainer
          image: pytorch/pytorch:1.9.0-cuda11.1-cudnn8-runtime
          workingDir: /mnt/storage/ChordMini
          imagePullPolicy: IfNotPresent
          env:
            - name: PYTHONPATH
              value: /mnt/storage/ChordMini
          command:
            - sh
            - -c
            - |
              set -e
              echo "Student model training container started"
              
              # Install dependencies
              apt-get update && apt-get install -y libsndfile1
              pip install --no-cache-dir -r requirements.txt
              pip install --no-cache-dir matplotlib tqdm pyyaml librosa
              
              # Create checkpoint directory
              mkdir -p checkpoints/student
              
              # Check data is available
              echo "Checking synthesized data:"
              find ./data/synth/spectrograms -type f | wc -l
              find ./data/synth/labels -type f | wc -l
              
              # Run spectrogram dimension check
              echo "Checking spectrogram dimensions..."
              python check_spectrogram_dim.py
              
              # Train the student model using existing config
              echo "Starting student model training..."
              python train_student.py --config ./config/student_config.yaml --save_dir ./checkpoints/student
              
              echo "Training complete."
          resources:
            requests:
              cpu: "2"
              memory: "8Gi"
              nvidia.com/gpu: "1"
            limits:
              cpu: "3"
              memory: "12Gi"
              nvidia.com/gpu: "1"
          volumeMounts:
            - name: storage
              mountPath: /mnt/storage
            - name: storage
              mountPath: /data
          
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: temporary-storage
