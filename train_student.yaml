apiVersion: batch/v1
kind: Job
metadata:
  name: student-training-job
  namespace: csuf-titans
  labels:
    app: chord-student-training
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: chord-student-training
    spec:
      restartPolicy: Never
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 86400
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 86400
      initContainers:
        - name: clone-repo
          image: alpine:3.16
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -ex
              echo "Installing git..."
              apk update && apk add --no-cache git
              echo "Checking for existing project repository..."
              if [ ! -d "/mnt/storage/ChordMini" ]; then
                echo "Cloning repository..."
                git clone https://gitlab.com/ptnghia-j/ChordMini.git /mnt/storage/ChordMini || {
                  echo "ERROR: Failed to clone repository"
                  exit 1
                }
              else
                echo "Repository already exists."
              fi
              exit 0
          volumeMounts:
            - name: storage
              mountPath: /mnt/storage
      containers:
        - name: student-trainer
          image: pytorch/pytorch:1.9.0-cuda11.1-cudnn8-runtime
          workingDir: /mnt/storage/ChordMini
          imagePullPolicy: IfNotPresent
          env:
            - name: PYTHONPATH
              value: /mnt/storage/ChordMini
          command:
            - sh
            - -c
            - |
              set -ex
              echo "=== Student model training container started ==="
              
              # Install necessary system packages
              apt-get update && apt-get install -y libsndfile1 || { echo "ERROR: Failed to install system dependencies"; exit 1; }
              
              # Create a minimal requirements.txt if missing
              if [ ! -f requirements.txt ]; then
                echo "Creating minimal requirements.txt"
                echo "numpy==1.22.0" > requirements.txt
                echo "librosa>=0.8.0" >> requirements.txt
                echo "torch>=1.9.0" >> requirements.txt
                echo "tqdm>=4.62.0" >> requirements.txt
                echo "scikit-learn>=1.0.0" >> requirements.txt
              fi
              
              pip install --no-cache-dir -r requirements.txt || { echo "WARNING: Some requirements may have failed"; }
              pip install --no-cache-dir matplotlib tqdm pyyaml librosa scikit-learn || { echo "ERROR: Failed to install additional Python packages"; exit 1; }
              
              # Verify that spectrograms and labels exist in the extracted location
              SPEC_COUNT=$(find ./data/synth/spectrograms -type f -name "*.npy" | wc -l)
              LABEL_COUNT=$(find ./data/synth/labels -type f -name "*.lab" | wc -l)
              echo "Found $SPEC_COUNT spectrogram files and $LABEL_COUNT label files"
              if [ "$SPEC_COUNT" -eq 0 ] || [ "$LABEL_COUNT" -eq 0 ]; then
                echo "ERROR: Missing spectrograms or labels for training"
                exit 1
              fi
              
              # Run the student training script with the provided student config.
              echo "Starting student training..."
              PYTHONPATH=/mnt/storage/ChordMini python train_student.py --config ./config/student_config.yaml --save_dir ./checkpoints/student
              
              echo "=== Student model training complete ==="
          resources:
            requests:
              cpu: "2"
              memory: "8Gi"
              nvidia.com/gpu: "1"
            limits:
              cpu: "3"
              memory: "12Gi"
              nvidia.com/gpu: "1"
          volumeMounts:
            - name: storage
              mountPath: /mnt/storage
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: temporary-storage